#!/bin/bash

# for loopでは、スペースを入れてしまうので、
# 次の行が入ってあると、それは解決されます
IFS=$'\n'

if [ -z $1 ] || [ $1 == "-h" ] || [ $1 == "help" ] || [ $1 == "-help" ]; then
  echo 'Type a number like "http 200" to see what status it is,'
  echo '-d => details'
  echo '-jp => Japanese'
  echo '-l => master list'

  echo ''

  echo '「http 200」という風に書くと、ステータス名が表示されます'
  echo '-d => 詳細'
  echo '-jp => 日本語（「-d」と一緒に使わないといけません）'
  echo '-l => すべてのステータスのリスト'

  exit 1
fi

# check if "-d" and "-jp" were declared
# 「-d」や「-jp」は定義されたかどうかチェック
d=false
jp=false
for k in $@
do
  if [ $k ]; then
    if [[ "$k" == "-d" ]]; then
      d=true
    elif [[ "$k" == "-jp" ]]; then
      jp=true
    fi
  fi
done

if [ $jp == true ] && [ $d == false ]; then
  echo "日本語の詳細を見るには、「-d」も入力しないといけません"
  exit 1
fi

# Variables
# 変数の定義
statuses=(
  "100 Continue"
  "101 Switching Protocols"
  "102 Processing"
  "200 OK"
  "201 Created"
  "202 Accepted"
  "203 Non-Autoritative Information (since HTTP/1.1)"
  "204 No Content"
  "205 Reset Content"
  "206 Partial Content (RFC 7233)"
  "207 Multi-Status (WebDAV; RFC 4918)"
  "208 Already Reported (WebDAV; RFC 5842)"
  "300 Multiple Choices"
  "301 Moved Permanently"
  "302 Found"
  "303 See Other (since HTTP/1.1)"
  "304 Not Modified (RFC 7232)"
  "305 Use Proxy (since HTTP/1.1)"
  "306 Switch Proxy"
  "307 Temporary Redirect (since HTTP/1.1)"
  "308 Permanent Redirect(RFC 7538)"
  "400 Bad Request"
  "401 Unauthorized"
  "402 Payment Required"
  "403 Forbidden"
  "404 Not Found"
  "405 Method Not Allowed"
  "406 Not Acceptable"
  "407 Proxy Authentication Required (RFC 7235)"
  "408 Request Time-out"
  "409 Conflict"
  "410 Gone"
  "411 Length Required"
  "412 Precondition Failed (RFC 7232)"
  "413 Payload Too Large (RFC 7231)"
  "414 URI Too Long (RFC 7231)"
  "415 Unsupported Media Type"
  "416 Range Not Satisfiable (RFC 7233)"
  "417 Expectation Failed"
  "418 I'm a teapot (RFC 2324)"
  "421 Misdirected Request (RFC 7540)"
  "422 Unprocessable Entity (WebDAV; RFC 4918)"
  "423 Locked (WebDav; RFC 4918)"
  "424 Failed Dependency (WebDAV; RFC 4918)"
  "426 Upgrade Required"
  "428 Precondition Required"
  "429 Too Many Requests"
  "431 Request Header Fields Too Large (RFC 6585)"
  "451 Unavailable For Legal Reasons"
  "500 Internal Server Error"
  "501 Not Implemented"
  "502 Bad Gateway"
  "503 Service Unavailable"
  "504 Gateway Time-out"
  "505 HTTP Version Not Supported"
  "506 Variant Also Negotiates (RFC 2295)"
  "507 Insufficient Storage (WebDAV; RFC 4918)"
  "508 Loop Detected (WebDAV; RFC 5842)"
  "510 Not Extended (RFC 2774)"
  "511 Network Authentication Required (RFC 6585)"
  )

details=(
 ["100"]="The server has received the request headers and the client should proceed to send the request body\
 (in case of a request for which a body needs to be sent; for example, a POST request). Sending a large request\
 body to a server after a request has been rejected for inappropriate headers would be inefficient. To have a\
  server check the request's headers, a client must sent Expect: 100-continue as a header in its initial request\
 and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed\
  indicates the request should not be continued"
  ["101"]="The requester has asked the server to switch protocols and the server has agreed to do so"
  ["102"]="A WebDAV request may contain many sub-requests involving file operations, requiring a long time to\
 complete the request. This code indicates that the server has received and is processing the request, but\
  no response is available yet. This prevents the client from timing out and assuming the request was lost"

 ["200"]="Standard response for succesful HTTP requests. The actual response will depend on the request\
 method used. In a GET request, the response will contain an entity correspoding to the requested resource.\
 In a POST request, the response will contain an entity describing or containing the result of the action."
 ["201"]="The request has been fulfilled, resulting in the creation of a new resource."
 ["202"]="The request has been accepted for processing, but the processing has not been completed.\
 The request might or might not be eventually acted upon, and may be disallowed when processing occurs."
 ["203"]="The server is a transforming proxy (e.g. a Web accelerator) that received a 200 OK from its\
 origin, but is returning a modified version of the origin's response."
 ["204"]="The server successfully processed the request and is not returning any content."
 ["205"]="The server successfully processed the request, but is not returning any content. Unlike a\
 204 response, this response requires that the requester reset the document view."
 ["206"]="The server is delivering only part of the resource (byte serving) due to a range header sent\
 by the client. The range header is used by HTTP clients to enable resuming of interrupted downloads,\
 or split a download into multiple simultaneous streams."
 ["207"]="The message body that follows is an XML message and can contain a number of separate repsonse\
 codes, depending on how many sub-requests were made."
 ["208"]="The members of a DAV binding have already been enumerated in a previous reply to this request,\
  and are not being included again."
 ["226"]="The server has fulfilled a request for the resource, and the response is a representation of\
 the result of one or more instance-manipulations applied to the current instance."

 ["300"]="Indicates multiple options for the resource from which the client may choose (via agent-driven\
 content negotiation). For example, this code could be used to present multiple video format options, to\
 list files with different filename extensions, or to suggest word-sense disambiguation."
 ["301"]="This and all future requests should be directed to the given URI"
 ["302"]="This is an example of industry practice contradicting the standard. The HTTP/1.0 specification\
 (RFC 1945) required the client to perform a temporary redirect (the original describing phrase was\
 \"Moved Temporarily\"), but popular browsers implemented 302 with the functionality of a 303 See Other.\
 Therefore, HTTP/1.1 added status codes 303 and 307 to distinguish between the two behaviours.\
 However, some Web applications and frameworks use the 302 status code as if it were the 303."
 ["303"]="The response to the request can be found under another URI using a GET method. When received\
 in response to a POST (or PUT/DELETE), the client should presume that the server has received the data\
 and should issue a redirect with a separate GET message."
 ["304"]="Indicates that the resource has not been modified since the version specified by the request headers\
 If-Modified-Since or If-None-Match. In such case, there is no need to retransmit the resource since the client\
 still has a previously-downloaded copy"
 ["305"]="The requested resource is available only through a proxy, the address for which is provided in the\
 response. Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this\
 status code, primarily for security reasons."
 ["306"]="No longer used. Originally meant \"Subsequent requests should use the specified proxy.\""
 ["307"]="In this case, the request should be repeated with another URI; however, future requests should still\
 use the original URI. In contrast to how 302 was historically implemented, the request method is not allowed\
 to be changed when reissuing the original request. For example, a POST request should be repeated using\
 another POST request."
 ["308"]="The request and all future requests should be repeated using another URI. 307 and 308 parallel the\
 behaviors of 302 and 301, but do not allow the HTTP method to change. So, for example, submitting a form to\
 a permanently redirected resource may continue smoothly."

 ["400"]="The server cannot or will not process the request due to an apparent client error (e.g., malformed\
 request syntax, too large size, invalid request message framing, or deceptive request routing)."
 ["401"]="Similar to 403 Forbidden, but specifically for use when authentication is required and has failed\
 or has not yet been provided. The response must include a WWW-Authenticate header field containing a\
 challenge applicable to the requested resource. See Basic access authentication and Digest access authentication.\
 semantically means \"unauthenticated\", i.e. the user does not have the necessary credentials.\
 Note: Some sites issue HTTP 401 when an IP address is banned from the website (usually the website domain) and\
 that specific address is refused permission to access a website."
 ["402"]="Reserved for future use. The original intention was that this code might be used as part of some\
 form of digital cash or micropayment scheme, but that has not happened, and this code is not usually used.\
 Google Developers API uses this status if a particular developer has exceeded the daily limit on requests."
 ["403"]="The request was a valid request, but the server is refusing to respond to it. The user might be logged\
 in but does not have the necessary permissions for the resource."
 ["404"]="The requested resource could not be found but may be available in the future. Subsequent requests by\
 the client are permissible."
 ["405"]="A request method is not supported for the requested resource; for example, a GET request on a form\
 which requires data to be presented via POST, or a PUT request on a read-only resource."
 ["406"]="The requested resource is capable of generating only content not acceptable according to the Accept\
 headers sent in the request."
 ["407"]="The client must first authenticate itself with the proxy."
 ["408"]="The server timed out waiting for the request. According to HTTP specifications: \"The client did\
 not produce a request within the time that the server was prepared to wait. The client MAY repeat the request\
 without modifications at any later time.\""
 ["409"]="Indicates that the request could not be processed because of conflict in the request, such as an edit\
 conflict between multiple simultaneous updates."
 ["410"]="Indicates that the resource requested is no longer available and will not be available again. This\
 should be used when a resource has been intentionally removed and the resource should be purged. Upon\
 receiving a 410 status code, the client should not request the resource in the future. Clients such as search\
 engines should remove the resource from their indices. Most use cases do not require clients and search\
 engines to purge the resource, and a \"404 Not Found\" may be used instead."
 ["411"]="The request did not specify the length of its content, which is required by the requested resource."
 ["412"]="The server does not meet one of the preconditions that the requester put on the request."
 ["413"]="The request is larger than the server is willing or able to process. Previously called\
 \"Request Entity Too Large\"."
 ["414"]="The URI provided was too long for the server to process. Often the result of too much data being\
 encoded as a query-string of a GET request, in which case it should be converted to a POST request.\
 Called \"Request-URI Too Long\" previously."
 ["415"]="The request entity has a media type which the server or resource does not support. For example,\
 the client uploads an image as image/svg+xml, but the server requires that images use a different format."
 ["416"]="The client has asked for a portion of the file (byte serving), but the server cannot supply that\
 portion. For example, if the client asked for a part of the file that lies beyond the end of the file.\
 Called \"Requested Range Not Satisfiable\" previously."
 ["417"]="The server cannot meet the requirements of the Expect request-header field."
 ["418"]="This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324,\
 Hyper Text Coffee Pot Control Protocol, and is not expected to be implemented by actual HTTP servers.\
 The RFC specifies this code should be returned by teapots requested to brew coffee. This HTTP status is\
 used as an easter egg in some websites, including Google.com."
 ["421"]="The request was directed at a server that is not able to produce a response (for example because\
 a connection reuse)."
 ["422"]="The request was well-formed but was unable to be followed due to semantic errors."
 ["423"]="The resource that is being accessed is locked."
 ["424"]="The request failed due to failure of a previous request (e.g., a PROPATCH)."
 ["426"]="The client should switch to a different protocal such as TLS/1.0, given in the Upgrade header field."
 ["428"]="The origin server requires the request to be conditional. Intended to prevent \"the 'lost update'\
 problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile\
 a third party has modified the state on the server, leading to a conflict.\""
 ["429"]="The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes."
 ["431"]="The server is unwilling to process the request because either an individual header field, or all the\
 header fields collectively, are too large."
 ["451"]="A server operator has received a legal demand to deny access to a resource or to a set of resources\
 that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451."

 ["500"]="A generic error message, given when an unexpected condition was encountered and no more specific\
 message is suitable."
 ["501"]="The server either does not recognize the request method, or it lacks the ability to fulfill the\
 request. Usually this implies future availability (e.g., a new feature of a web-service API)."
 ["502"]="The server was acting as a gateway or proxy and received an invalid response from the upstream server."
 ["503"]="The server is currently unavailable (because it is overloaded or down for maintenance).\
 Generally, this is a temporary state."
 ["504"]="The server was acting as a gateway or proxy and did not receive a timely response from\
 the upstream server."
 ["505"]="The server does not support the HTTP protocol version used in the request."
 ["506"]="Transparent content negotiation for the request results in a circular reference."
 ["507"]="The server is unable to store the representation needed to complete the request."
 ["508"]="The server detected an infinite loop while processing the request (sent in lieu of 208 Already Reported)."
 ["510"]="Further extensions to the request are required for the server to fulfill it."
 ["511"]="The client needs to authenticate to gain network access. Intended for use by intercepting proxies\
 used to control access to the network (e.g., \"captive portals\" used to require agreement to Terms of\
 Service before granting full Internet access via a Wi-Fi hotspot)."
  )

details_jp=(
  ["100"]="継続。クライアントはリクエストを継続できる。サーバがリクエストの最初の部分を受け取り、まだ拒否していないことを示す。\
例として、クライアントがExpect: 100-continueヘッダをつけたリクエストを行い、それをサーバが受理した場合に返される。"
  ["101"]="プロトコル切替え。サーバはリクエストを理解し、遂行のためにプロトコルの切替えを要求している。"
  ["102"]="処理中。WebDAVの拡張ステータスコード。処理が継続されて行われていることを示す。"

  ["200"]="OK。リクエストは成功し、レスポンスとともに要求に応じた情報が返される。\
ブラウザでページが正しく表示された場合は、ほとんどがこのステータスコードを返している。"
  ["201"]="作成。リクエストは完了し、新たに作成されたリソースのURIが返される。\
例: PUTメソッドでリソースを作成するリクエストを行ったとき、そのリクエストが完了した場合に返される。"
  ["202"]="受理。リクエストは受理されたが、処理は完了していない。\
例: PUTメソッドでリソースを作成するリクエストを行ったとき、サーバがリクエストを受理したものの、リソースの作成が完了\
していない場合に返される。バッチ処理向け。"
  ["203"]="信頼できない情報。オリジナルのデータではなく、ローカルやプロキシ等からの情報であることを示す。"
  ["204"]="内容なし。リクエストを受理したが、返すべきレスポンスエンティティが存在しない場合に返される。\
例: POSTメソッドでフォームの内容を送信したが、ブラウザの画面を更新しない場合に返される。"
  ["205"]="内容のリセット。リクエストを受理し、ユーザエージェントの画面をリセットする場合に返される。\
例: POSTメソッドでフォームの内容を送信した後、ブラウザの画面を初期状態に戻す場合に返される。"
  ["206"]="部分的内容。部分的GETリクエストを受理したときに、返される。\
例: ダウンロードツール等で分割ダウンロードを行った場合や、レジュームを行った場合に返される。"
  ["207"]="複数のステータス。WebDAVの拡張ステータスコード。"
  ["208"]="既に報告。WebDAVの拡張ステータスコード。"
  ["226"]="IM使用。Delta encoding in HTTPの拡張ステータスコード。"

  ["300"]="複数の選択。リクエストしたリソースが複数存在し、ユーザやユーザーエージェントに選択肢を提示するときに\
  返される。具体例として、W3Cのhttp://www.w3.org/TR/xhtml11/DTD/xhtml11.html"
  ["301"]="恒久的に移動した。リクエストしたリソースが恒久的に移動されているときに返される。\
  Location:ヘッダに移動先のURLが示されている。例としては、ファイルではなくディレクトリに対応するURLの末尾に/を書かずに\
  アクセスした場合に返される。具体例として、http://www.w3.org/TR"
  ["302"]="発見した。リクエストしたリソースが一時的に移動されているときに返される。Location:ヘッダに移動先のURLが示されている。\
元々はMoved Temporarily（一時的に移動した）で、本来はリクエストしたリソースが一時的にそのURLに存在せず、別のURLにある場合に使用する\
ステータスコードであった。しかし、例えば掲示板やWikiなどで投稿後にブラウザを他のURLに転送したいときにもこのコードが使用されるようになったため、\
302はFoundになり、新たに303・307が作成された。"
  ["303"]="他を参照せよ。リクエストに対するレスポンスが他のURLに存在するときに返される。Location:ヘッダに移動先のURLが示されている。\
リクエストしたリソースは確かにそのURLにあるが、他のリソースをもってレスポンスとするような場合に使用する。302の説明で挙げたような、\
掲示板やWikiなどで投稿後にブラウザを他のURLに転送したいときに使われるべきコードとして導入された。"
  ["305"]="プロキシを使用せよ。レスポンスのLocation:ヘッダに示されるプロキシを使用してリクエストを行わなければならないことを示す。"
  ["306"]="将来のために予約されている。ステータスコードは前のバージョンの仕様書では使われていたが、もはや使われておらず、\
  将来のために予約されているとされる。検討段階では、「Switch Proxy」というステータスコードが提案されていた。"
  ["307"]="一時的リダイレクト。リクエストしたリソースは一時的に移動されているときに返される。Location:ヘッダに移動先のURLが示されている。\
302の規格外な使用法が横行したため、302の本来の使用法を改めて定義したもの。"
  ["308"]="恒久的リダイレクト。"

  ["400"]="リクエストが不正である。定義されていないメソッドを使うなど、クライアントのリクエストがおかしい場合に返される。"
  ["401"]="認証が必要である。Basic認証やDigest認証などを行うときに使用される。\
たいていのブラウザはこのステータスを受け取ると、認証ダイアログを表示する。"
  ["402"]="支払いが必要である。現在は実装されておらず、将来のために予約されているとされる。"
  ["403"]="禁止されている。リソースにアクセスすることを拒否された。リクエストはしたが処理できないという意味。\
アクセス権がない場合や、ホストがアクセス禁止処分を受けた場合などに返される。\
例: 社内（イントラネット）からのみアクセスできるページに社外からアクセスしようとした。"
  ["404"]="未検出。リソースが見つからなかった。\
単に、アクセス権がない場合などにも使用される。"
  ["405"]="許可されていないメソッド。許可されていないメソッドを使用しようとした。\
例: POSTメソッドの使用が許されていない場所で、POSTメソッドを使用した場合に返される。"
  ["406"]="受理できない。Accept関連のヘッダに受理できない内容が含まれている場合に返される。\
例: サーバは英語か日本語しか受け付けられないが、リクエストのAccept-Language:ヘッダにzh（中国語）しか含まれていなかった。\
例: サーバはapplication/pdfを送信したかったが、リクエストのAccept:ヘッダにapplication/pdfが含まれていなかった。\
例: サーバはUTF-8の文章を送信したかったが、リクエストのAccept-Charset:ヘッダには、UTF-8が含まれていなかった。"
  ["407"]="プロキシ認証が必要である。プロキシの認証が必要な場合に返される。"
  ["408"]="リクエストタイムアウト。リクエストが時間以内に完了していない場合に返される。"
  ["409"]="競合。要求は現在のリソースと競合するので完了出来ない。"
  ["410"]="消滅した。リソースは恒久的に移動・消滅した。どこに行ったかもわからない。\
404 Not Foundと似ているが、こちらは二度と復活しない場合に使われる。ただし、このコードは特別に設定しないと提示できないため、\
リソースが消滅しても404コードを出すサイトが多い。"
  ["411"]="長さが必要。Content-Length ヘッダがないのでサーバがアクセスを拒否した場合に返される。"
  ["412"]="前提条件で失敗した。前提条件が偽だった場合に返される。\
例: リクエストのIf-Unmodified-Since:ヘッダに書いた時刻より後に更新があった場合に返される。"
  ["413"]="ペイロードが大きすぎる。リクエストエンティティがサーバの許容範囲を超えている場合に返す。\
例: アップローダの上限を超えたデータを送信しようとした。\
RFC 2616以前では、Request Entity Too Large（リクエストエンティティが大きすぎる）と定められていた。"
  ["414"]="URIが大きすぎる。URIが長過ぎるのでサーバが処理を拒否した場合に返す。\
例: 画像データのような大きなデータをGETメソッドで送ろうとし、URIが何10kBにもなった場合に返す（上限はサーバに依存する）。\
RFC 2616以前では、Request-URI Too Long（リクエストURIが大きすぎる）と定められていた。"
  ["415"]="サポートしていないメディアタイプ。指定されたメディアタイプがサーバでサポートされていない場合に返す。"
  ["416"]="レンジは範囲外にある。実リソースのサイズを超えるデータを要求した。\
たとえば、リソースのサイズが1024Byteしかないのに、1025Byteを取得しようとした場合などに返す。\
RFC 2616以前では、Requested Range Not Satisfiable（リクエストしたレンジは範囲外にある）と定められていた。"
  ["417"]="Expectヘッダによる拡張が失敗。その拡張はレスポンスできない。またはプロキシサーバは、\
  次に到達するサーバがレスポンスできないと判断している。\
具体例として、Expect:ヘッダに100-continue以外の変なものを入れた場合や、そもそもサーバが100 Continueを扱えない場合に返す。"
  ["418"]="私はティーポット。HTCPCP/1.0の拡張ステータスコード。\
ティーポットにコーヒーを淹れさせようとして、拒否された場合に返すとされる、ジョークのコードである。"
  ["421"]="誤ったリクエスト。"
  ["422"]="処理できないエンティティ。WebDAVの拡張ステータスコード。"
  ["423"]="ロックされている。WebDAVの拡張ステータスコード。リクエストしたリソースがロックされている場合に返す。"
  ["424"]="依存関係で失敗。WebDAVの拡張ステータスコード。"
  ["426"]="アップグレード要求。Upgrading to TLS Within HTTP/1.1の拡張ステータスコード。"
  ["451"]="法的理由により利用不可。403 Forbiddenから派生したステータスコード。"

  ["500"]="サーバ内部エラー。サーバ内部にエラーが発生した場合に返される。\
例として、CGIとして動作させているプログラムに文法エラーがあったり、設定に誤りがあった場合などに返される。"
  ["501"]="実装されていない。実装されていないメソッドを使用した。\
例として、WebDAVが実装されていないサーバに対してWebDAVで使用するメソッド（MOVEやCOPY）を使用した場合に返される。"
  ["502"]="不正なゲートウェイ。ゲートウェイ・プロキシサーバは不正な要求を受け取り、これを拒否した。"
  ["503"]="サービス利用不可。サービスが一時的に過負荷やメンテナンスで使用不可能である。\
例として、アクセスが殺到して処理不能に陥った場合に返される。"
  ["504"]="ゲートウェイタイムアウト。ゲートウェイ・プロキシサーバはURIから推測されるサーバからの適切なレスポンスがなくタイムアウトした。"
  ["505"]="サポートしていないHTTPバージョン。リクエストがサポートされていないHTTPバージョンである場合に返される。"
  ["506"]="Transparent Content Negotiation in HTTPで定義されている拡張ステータスコード。"
  ["507"]="容量不足。WebDAVの拡張ステータスコード。リクエストを処理するために必要なストレージの容量が足りない場合に返される。"
  ["508"]="WebDAVの拡張ステータスコード。"
  ["509"]="帯域幅制限超過。そのサーバに設定されている帯域幅（転送量）を使い切った場合に返される。"
  ["510"]="拡張できない。An HTTP Extension Frameworkで定義されている拡張ステータスコード。"
  )

# Colors 色
CYAN='\033[0;36m'
GREEN='\033[0;32m'
LIGHT_BLUE='\033[1;34m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

function colors () {
  if [ $# -eq 0 ]; then
    echo "No arguments supplied"
    exit 1
  fi
  if [[ "$i" =~ ^1 ]]; then
    printf "${CYAN}${i}${NC}\n"
  elif [[ "$i" =~ ^2 ]]; then
    printf "${GREEN}${i}${NC}\n"
  elif [[ "$i" =~ ^3 ]]; then
    printf "${LIGHT_BLUE}${i}${NC}\n"
  elif [[ "$i" =~ ^4 ]]; then
    printf "${RED}${i}${NC}\n"
  elif [[ "$i" =~ ^5 ]]; then
    printf "${YELLOW}${i}${NC}\n"
  fi
}

# If an argument is passed: i.e. - "$ http 200"
# multiple statuses can be declared as well: "$ http 200 403"
# 「$ http 200」みたいに引数を渡す場合
# 複数のステータスも入れられます：「$ http 200 403」
for k in $@
do
  if [ $k ]; then
    for i in ${statuses[@]};
    do
      if [[ "$i" =~ ^"${k}" ]]; then
        colors $i
        if [ $d == true ]; then
          if [ $jp == true ]; then
            echo "${details_jp[${k}]}" # Japanese 日本語
          elif [ $jp == false ]; then
            echo "${details[${k}]}" # English 英語
          fi
        fi
      fi
    done
  fi
done

# If "-l" is passed as an argument (the master list)
# 「-l」が引数として渡された場合（マスターリストを表示する）
if [[ $1 =~ "-l" ]]; then
  for i in ${statuses[@]}:
  do
    colors $i
    if [ $d == true ]; then
      if [ $jp == true ]; then
        for det_jp in ${!details_jp[@]}:
        do
          if [[ "$i" =~ $det_jp ]]; then
            echo "${details_jp[det_jp]}" # Japanese 日本語
          fi
        done
      elif [ $jp == false ]; then
        for det in ${!details[@]}:
        do
          if [[ "$i" =~ $det ]]; then
            echo "${details[det]}" # English 英語
          fi
        done
      fi
    fi
  done
fi

exit 0
